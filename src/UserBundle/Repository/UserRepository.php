<?php

namespace UserBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Función que recupera el password del usuario
     * 
     * @author Pablo López <pablo.lopez@eurotransportcar.com>
     *
     * @param $id
     * @return $currentPass
     */
    public function getCurrentPass($id) {
        
        $parameters = array();
        
        $query = 
            'SELECT 
                u.password
            FROM 
                users u
            WHERE 
                u.id = :id'
        ;

        $parameters['id'] = $id;

        try {
            $query = $this->getEntityManager()->getConnection()->prepare($query);
            $query->execute($parameters);
            $currentPass = $query->fetchAll(\PDO::FETCH_ASSOC);
        } catch (\Throwable $th) {
            throw $th;
        }

        return $currentPass;
    }

    /**
     * Función que actualiza la contraseña de un usuario
     * 
     * @author Pablo López <pablo.lopez@eurotransportcar.com>
     *
     * @param $user
     * @param $encodedPassword
     * @param $active
     * @param boolean $needPersist
     * @return boolean
     */
    public function update($user, $encodedPassword, $active = null, $needPersist = false) {
        try {
            $em = $this->getEntityManager();

            if ($active !== null) {
                $user->setIsActive($active);
            }

            $user->setPassword($encodedPassword); 

            if ($needPersist) {
                $em->persist($user);
            }

            $em->flush();
        } catch (\Throwable $th) {
            return false;
        }

        return true;
    }

    /**
     * Función que elimina un usuario
     * 
     * @author Pablo López <pablo.lopez@eurotransportcar.com>
     *
     * @param $user
     * @return boolean
     */
    public function remove($user) {
        try {
            $em = $this->getEntityManager();
            $em->remove($user);
            $em->flush();
        } catch (\Throwable $th) {
            return false;
        }

        return true;
    }
}